/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/Bomb.gltf 
*/

import React, { useRef } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'

import { useDrag } from '@use-gesture/react';
import { useThree } from '@react-three/fiber';

import * as THREE from "three";
import { useCustomization } from '../../contexts/Customization';

const Bomb = (props) => {

  const { material, sideWire, wire1Color, wire2Color, wire3Color, password, setPassword } = useCustomization();
  const { size, viewport } = useThree();
  const aspect = size.width / viewport.width;

  const bind = useDrag(({ offset: [x, y] }) => {
    // handle drag event
    console.log('drag', x * aspect, y * aspect);
  }, { filterTaps: true });

  const { nodes, materials } = useGLTF('/models/Bomb.gltf')

  const handleClick_0 = (e) => {
    setPassword(prevPassword => {
      if (prevPassword.length >= 4) {
        let newPassword = [...prevPassword]; // Create a copy of the password array
        newPassword.shift(); // Remove the first element
        newPassword.push(0);
        return newPassword; // Update the password state
      } else {
        return [...prevPassword, 0]; // If the length is less than 4, just add 8 at the end
      }
    });
  };
  const handleClick_1 = (e) => {
    setPassword(prevPassword => {
      if (prevPassword.length >= 4) {
        let newPassword = [...prevPassword]; // Create a copy of the password array
        newPassword.shift(); // Remove the first element
        newPassword.push(1);
        return newPassword; // Update the password state
      } else {
        return [...prevPassword, 1]; // If the length is less than 4, just add 8 at the end
      }
    });
  };

  const handleClick_2 = (e) => {
    setPassword(prevPassword => {
      if (prevPassword.length >= 4) {
        let newPassword = [...prevPassword]; // Create a copy of the password array
        newPassword.shift(); // Remove the first element
        newPassword.push(2);
        return newPassword; // Update the password state
      } else {
        return [...prevPassword, 2]; // If the length is less than 4, just add 8 at the end
      }
    });
  };

  const handleClick_3 = (e) => {
    setPassword(prevPassword => {
      if (prevPassword.length >= 4) {
        let newPassword = [...prevPassword]; // Create a copy of the password array
        newPassword.shift(); // Remove the first element
        newPassword.push(3);
        return newPassword; // Update the password state
      } else {
        return [...prevPassword, 3]; // If the length is less than 4, just add 8 at the end
      }
    });
  };

  const handleClick_4 = (e) => {
    setPassword(prevPassword => {
      if (prevPassword.length >= 4) {
        let newPassword = [...prevPassword]; // Create a copy of the password array
        newPassword.shift(); // Remove the first element
        newPassword.push(4);
        return newPassword; // Update the password state
      } else {
        return [...prevPassword, 4]; // If the length is less than 4, just add 8 at the end
      }
    });
  };

  const handleClick_5 = (e) => {
    setPassword(prevPassword => {
      if (prevPassword.length >= 4) {
        let newPassword = [...prevPassword]; // Create a copy of the password array
        newPassword.shift(); // Remove the first element
        newPassword.push(5);
        return newPassword; // Update the password state
      } else {
        return [...prevPassword, 5]; // If the length is less than 4, just add 8 at the end
      }
    });
  };

  const handleClick_6 = (e) => {
    setPassword(prevPassword => {
      if (prevPassword.length >= 4) {
        let newPassword = [...prevPassword]; // Create a copy of the password array
        newPassword.shift(); // Remove the first element
        newPassword.push(6);
        return newPassword; // Update the password state
      } else {
        return [...prevPassword, 6]; // If the length is less than 4, just add 8 at the end
      }
    });
  };

  const handleClick_7 = (e) => {
    setPassword(prevPassword => {
      if (prevPassword.length >= 4) {
        let newPassword = [...prevPassword]; // Create a copy of the password array
        newPassword.shift(); // Remove the first element
        newPassword.push(7);
        return newPassword; // Update the password state
      } else {
        return [...prevPassword, 7]; // If the length is less than 4, just add 8 at the end
      }
    });
  };

  const handleClick_8 = (e) => {
    setPassword(prevPassword => {
      if (prevPassword.length >= 4) {
        let newPassword = [...prevPassword]; // Create a copy of the password array
        newPassword.shift(); // Remove the first element
        newPassword.push(8);
        return newPassword; // Update the password state
      } else {
        return [...prevPassword, 8]; // If the length is less than 4, just add 8 at the end
      }
    });
  };

  const handleClick_9 = (e) => {
    setPassword(prevPassword => {
      if (prevPassword.length >= 4) {
        let newPassword = [...prevPassword]; // Create a copy of the password array
        newPassword.shift(); // Remove the first element
        newPassword.push(9);
        return newPassword; // Update the password state
      } else {
        return [...prevPassword, 9]; // If the length is less than 4, just add 8 at the end
      }
    });
  };

  const handleClick_back = (e) => {
    if (password.length > 0) {
      const newPassword = password.slice(0, -1);
      setPassword(newPassword);
    }
  };

  {/* Materials */ }
  {/*Wood */ }
  const woodTextureProps = useTexture({
    map: "/textures/wood/Substance_Graph_BaseColor.jpg",
    normalMap: "/textures/wood/Substance_Graph_Normal.jpg",
    roughnessMap: "/textures/wood/Substance_Graph_Roughness.jpg",
    aoMap: "/textures/wood/Substance_Graph_AmbientOcclusion.jpg",
  });

  woodTextureProps.map.repeat.set(3, 3);
  woodTextureProps.normalMap.repeat.set(3, 3);
  woodTextureProps.roughnessMap.repeat.set(3, 3);
  woodTextureProps.aoMap.repeat.set(3, 3);
  woodTextureProps.map.wrapS = woodTextureProps.map.wrapT =
    THREE.MirroredRepeatWrapping;
  woodTextureProps.normalMap.wrapS = woodTextureProps.normalMap.wrapT =
    THREE.MirroredRepeatWrapping;
  woodTextureProps.roughnessMap.wrapS =
    woodTextureProps.roughnessMap.wrapT = THREE.MirroredRepeatWrapping;
  woodTextureProps.aoMap.wrapS = woodTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;


  {/* Box Metal Texture */ }
  const metalTextureProps = useTexture({
    map: "/textures/scifi/Sci-fi_Hose_004_Basecolor.jpg",
    normalMap: "/textures/scifi/Sci-fi_Hose_004_normal.jpg",
    roughnessMap: "/textures/scifi/Sci-fi_Hose_004_roughness.jpg",
    aoMap: "/textures/scifi/Sci-fi_Hose_004_ambientOcclusion.jpg",
  });

  metalTextureProps.map.repeat.set(3, 3);
  metalTextureProps.normalMap.repeat.set(3, 3);
  metalTextureProps.roughnessMap.repeat.set(3, 3);
  metalTextureProps.aoMap.repeat.set(3, 3);
  metalTextureProps.map.wrapS = metalTextureProps.map.wrapT =
    THREE.RepeatWrapping;
  metalTextureProps.normalMap.wrapS = metalTextureProps.normalMap.wrapT =
    THREE.RepeatWrapping;
  metalTextureProps.roughnessMap.wrapS =
    metalTextureProps.roughnessMap.wrapT = THREE.RepeatWrapping;
  metalTextureProps.aoMap.wrapS = metalTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;

  {/* Tape Material */ }
  const tapeTextureProps = useTexture({
    map: "/textures/tape/Metal_006_basecolor.jpg",
    normalMap: "/textures/tape/Metal_006_normal.jpg",
    roughnessMap: "/textures/tape/Metal_006_roughness.jpg",
    aoMap: "/textures/tape/Metal_006_ambientOcclusion.jpg",
  });

  tapeTextureProps.map.repeat.set(3, 3);
  tapeTextureProps.normalMap.repeat.set(3, 3);
  tapeTextureProps.roughnessMap.repeat.set(3, 3);
  tapeTextureProps.aoMap.repeat.set(3, 3);
  tapeTextureProps.map.wrapS = tapeTextureProps.map.wrapT =
    THREE.RepeatWrapping;
  tapeTextureProps.normalMap.wrapS = tapeTextureProps.normalMap.wrapT =
    THREE.RepeatWrapping;
  tapeTextureProps.roughnessMap.wrapS =
    tapeTextureProps.roughnessMap.wrapT = THREE.RepeatWrapping;
  tapeTextureProps.aoMap.wrapS = tapeTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;
  {/* Materials */ }

  return (
    <group {...props} dispose={null}>
      {/* three big blocks making the back bone of the bomb */}
      <mesh geometry={nodes.Куб.geometry} material={materials.Материал} position={[0.518, 0.317, -0.219]} rotation={[Math.PI / 4, 0, 0]} scale={[0.277, 0.215, 1.232]} >
        <meshStandardMaterial {...(material === 'wood' ? woodTextureProps : metalTextureProps)} />
      </mesh>
      {/* three big blocks making the back bone of the bomb */}

      <mesh geometry={nodes.Куб001.geometry} material={materials.Материал} position={[0.522, 1.214, -1.079]} rotation={[Math.PI / 4, 0, -0.435]} scale={[0.233, 0.082, 0.02]} />
      <mesh geometry={nodes.Куб002.geometry} material={materials.Материал} position={[-0.613, 1.206, -1.08]} rotation={[Math.PI / 4, 0, -0.087]} scale={[0.182, 0.058, 0.015]} />
      <mesh geometry={nodes.Куб003.geometry} material={materials.Материал} position={[-0.051, 1.206, -1.073]} rotation={[Math.PI / 4, 0, 0.189]} scale={[0.24, 0.078, 0.02]} />
      <group position={[-0.028, 0.454, -0.064]} rotation={[-2.356, 0, -Math.PI]} scale={[0.642, 0.039, 1.051]}>
        <mesh geometry={nodes.Куб004_1.geometry} material={materials['Материал.002']} />
        <mesh geometry={nodes.Куб004_2.geometry} material={materials['Материал.003']} />
      </group>

      {/* bg of keys used for numpad  */}
      <mesh geometry={nodes.Куб005.geometry} material={materials['Материал.010']} position={[-0.168, 0.301, 0.189]} rotation={[Math.PI / 4, 0, 0]} scale={[0.403, 0.04, 0.528]} />
      <mesh geometry={nodes.Куб006.geometry} material={materials.Material} position={[0.057, 0.579, -0.013]} rotation={[Math.PI / 4, 0, 0]} scale={[0.097, 0.039, 0.097]} />
      {/* bg of keys used for numpad  */}

      {/* side metal block  */}
      <mesh geometry={nodes.Куб007.geometry} material={materials['Материал.010']} position={[-0.93, 0.883, -0.74]} rotation={[Math.PI / 4, 0, 0]} scale={[0.146, 0.151, 0.24]} />
      {/* side metal block  */}

      <mesh geometry={nodes.Цилиндр.geometry} material={materials['Материал.010']} position={[-0.971, 0.976, -0.643]} rotation={[Math.PI / 4, 0, 0]} scale={[0.024, 0.028, 0.024]} />
      <mesh geometry={nodes.Цилиндр001.geometry} material={materials['Материал.009']} position={[-0.987, 1.073, -0.534]} rotation={[Math.PI / 4, 0, Math.PI / 2]} scale={[0.074, 0.054, 0.093]} />

      {/* Tape holding the bomb */}
      <mesh geometry={nodes.Куб008.geometry} material={materials['Материал.001']} position={[-0.051, 0.654, -0.541]} rotation={[Math.PI / 4, 0, 0]} scale={[0.885, 0.243, 0.082]} >
        <meshStandardMaterial {...tapeTextureProps} />
      </mesh>

      <mesh geometry={nodes.Куб009.geometry} material={materials['Материал.001']} position={[-0.051, -0.401, 0.509]} rotation={[Math.PI / 4, -0.038, 0]} scale={[0.901, 0.248, 0.099]} >
        <meshStandardMaterial {...tapeTextureProps} />
      </mesh>
      {/* Tape holding the bomb */}

      {/* Keys of Numpad */}
      <mesh {...bind()} geometry={nodes.Текст.geometry} material={materials['Материал.007']} position={[-0.476, 0.545, 0.043]} rotation={[Math.PI / 4, 0, 0]} scale={0.24} onClick={handleClick_1} />
      <mesh {...bind()} geometry={nodes.Текст001.geometry} material={materials['Материал.007']} position={[-0.222, 0.544, 0.042]} rotation={[Math.PI / 4, 0, 0]} scale={0.186} onClick={handleClick_2} />
      <mesh {...bind()} geometry={nodes.Текст002.geometry} material={materials['Материал.007']} position={[0.012, 0.546, 0.041]} rotation={[Math.PI / 4, 0, 0]} scale={0.186} onClick={handleClick_3} />
      <mesh {...bind()} geometry={nodes.Текст003.geometry} material={materials['Материал.007']} position={[-0.464, 0.377, 0.21]} rotation={[Math.PI / 4, 0, 0]} scale={0.186} onClick={handleClick_4} />
      <mesh {...bind()} geometry={nodes.Текст004.geometry} material={materials['Материал.007']} position={[-0.221, 0.378, 0.208]} rotation={[Math.PI / 4, 0, 0]} scale={0.186} onClick={handleClick_5} />
      <mesh {...bind()} geometry={nodes.Текст005.geometry} material={materials['Материал.007']} position={[0.009, 0.38, 0.207]} rotation={[Math.PI / 4, 0, 0]} scale={0.186} onClick={handleClick_6} />
      <mesh {...bind()} geometry={nodes.Текст006.geometry} material={materials['Материал.007']} position={[-0.461, 0.212, 0.374]} rotation={[Math.PI / 4, 0, 0]} scale={0.186} onClick={handleClick_7} />
      <mesh {...bind()} geometry={nodes.Текст007.geometry} material={materials['Материал.007']} position={[-0.224, 0.214, 0.373]} rotation={[Math.PI / 4, 0, 0]} scale={0.186} onClick={handleClick_8} />
      <mesh {...bind()} geometry={nodes.Текст008.geometry} material={materials['Материал.007']} position={[0.012, 0.213, 0.372]} rotation={[Math.PI / 4, 0, 0]} scale={0.186} onClick={handleClick_9} />
      <mesh {...bind()} geometry={nodes.Текст009.geometry} material={materials['Материал.007']} position={[-0.222, 0.048, 0.537]} rotation={[Math.PI / 4, 0, 0]} scale={0.186} onClick={handleClick_0} />
      <mesh {...bind()} geometry={nodes.Текст010.geometry} material={materials['Материал.007']} position={[-0.469, -0.004, 0.592]} rotation={[Math.PI / 4, 0, 0]} scale={0.273} />
      <mesh {...bind()} geometry={nodes.Текст011.geometry} material={materials['Материал.007']} position={[0.005, 0.048, 0.537]} rotation={[Math.PI / 4, 0, 0]} scale={0.186} onClick={handleClick_back} />
      <mesh {...bind()} geometry={nodes.Текст012.geometry} material={materials['Материал.007']} position={[-0.01, 0.127, 0.456]} rotation={[Math.PI / 4, -1.436, 0]} scale={0.186} />
      {/* Keys of Numpad */}

      <mesh geometry={nodes.Куб010.geometry} material={materials['Материал.010']} position={[0.199, 0.531, -0.039]} rotation={[Math.PI / 4, 0, 0]} scale={[0.098, 0.03, 0.157]} />
      <mesh geometry={nodes.Куб011.geometry} material={materials['Материал.010']} position={[0.199, 0.291, 0.202]} rotation={[Math.PI / 4, 0, 0]} scale={[0.098, 0.03, 0.157]} />
      <mesh geometry={nodes.Куб012.geometry} material={materials['Материал.001']} position={[-0.155, 0.576, -0.308]} rotation={[Math.PI / 4, 0.02, 0]} scale={[0.534, 0.15, 0.026]} />
      <mesh geometry={nodes.Плоскость.geometry} material={materials['Материал.010']} position={[-0.308, 0.733, -0.273]} rotation={[Math.PI / 4, 0, 0]} scale={[0.027, 0.6, 0.045]} />
      <mesh geometry={nodes.Сфера.geometry} material={materials['Материал.004']} position={[-0.473, 0.731, -0.273]} rotation={[Math.PI / 4, 0, 0]} scale={[0.03, 0.033, 0.03]} />
      <mesh geometry={nodes.Плоскость001.geometry} material={materials['Материал.010']} position={[-0.188, 0.716, -0.281]} rotation={[Math.PI / 4, 0, 0]} scale={[0.054, 0.289, 0.042]} />

      {/* Group of wires */}
      <mesh geometry={nodes.Цилиндр002.geometry} material={materials['Материал.010']} position={[0.134, 0.713, -0.283]} rotation={[Math.PI / 4, 0, 0]} scale={0.035} />
      <mesh geometry={nodes.Цилиндр003.geometry} material={materials['Материал.010']} position={[-0.179, 0.713, -0.283]} rotation={[Math.PI / 4, 0, 0]} scale={0.035} />
      <mesh geometry={nodes.Цилиндр004.geometry} material={materials['Материал.007']} position={[0.414, 1.221, -1.041]} rotation={[-Math.PI / 4, 0, 0]} scale={0.048} >
        <meshStandardMaterial color={wire2Color.color} />
      </mesh>
      <mesh geometry={nodes.Цилиндр005.geometry} material={materials['Материал.008']} position={[-0.082, 1.222, -1.101]} rotation={[2.356, 0, 0]} scale={0.039} >
        <meshStandardMaterial color={wire1Color.color} />
      </mesh>
      <mesh geometry={nodes.Цилиндр006.geometry} material={materials['Материал.009']} position={[-0.732, 1.244, -1.103]} rotation={[2.356, 0, 0]} scale={0.047} >
        <meshStandardMaterial color={wire3Color.color} />
      </mesh>
      {/* Group of wires */}

      <mesh geometry={nodes.Куб013.geometry} material={materials['Материал.010']} position={[0.364, 0.954, -0.514]} rotation={[Math.PI / 4, 0, 0]} scale={[0.106, 0.017, 0.052]} />
      <group position={[0.304, 0.952, -0.515]} rotation={[Math.PI / 4, 0, 0]} scale={0.022}>
        <mesh geometry={nodes.Mesh.geometry} material={materials['Материал.005']} />
        <mesh geometry={nodes.Mesh_1.geometry} material={materials['Материал.006']} />
      </group>
      <group position={[-0.619, 0.446, 0.009]} rotation={[Math.PI / 4, 0, 0]} scale={[0.039, 0.526, 0.1]}>
        <mesh geometry={nodes.Плоскость003_1.geometry} material={materials['Материал.010']} />
        <lineSegments geometry={nodes.Плоскость003_2.geometry} material={materials['Материал.010']} />
      </group>
      <group position={[-0.619, 0.051, 0.404]} rotation={[Math.PI / 4, 0, 0]} scale={[0.039, 0.526, 0.1]}>
        <mesh geometry={nodes.Плоскость004.geometry} material={materials['Материал.010']} />
        <lineSegments geometry={nodes.Плоскость004_1.geometry} material={materials['Материал.010']} />
      </group>

      {/* Wire on left side of numpad */}
      <mesh geometry={nodes.Цилиндр009.geometry} material={materials['Материал.007']} position={[-0.68, 0.493, -0.013]} rotation={[Math.PI / 4, 0, -Math.PI / 2]} scale={[0.016, 0.017, 0.022]} visible={sideWire} />
      {/* Wire on left side of numpad */}
    </group>
  )
}

useGLTF.preload('/models/Bomb.gltf')
export default Bomb;